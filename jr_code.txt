import edu.ucdavis.jr.JR;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class exercise_18 {
    private static Queue<Integer> products_list = LinkedList<>();
    private static int index_list = 50;

    private static process Consumer{
        while (!products_list.isEmpty()) {
            System.out.println("Consumer remove in products list... Product [" + products_list.poll()+"]");
        }
    }

    private static process Producer{
        Random random = new Random();

        for (int i = 1; i <= index_list; i++) {
            int random_int = random.nextInt(100) + 1;
            products_list.add(random_int);
            System.out.println("Producer add in products list... Product [" + products_list.peek() + "]");
        }
    }

    public static void main(String[] args) {
        try {
			JR.registerQuiescenceAction(end);
		} catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
			e.printStackTrace();
		}
    }

    private static op void end(){
        System.out.println("This is the end...");
    }
}

--------------------------------------------------------------------
error 1.0
root@0a37ad62b4be:/jr_code/Example/exercise_18# jr exercise_18
Note: jrGen/exercise_18.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
JR runtime error in "Thread-4" edu.ucdavis.jr.jrRuntimeError: Unhandled exception: java.lang.NullPointerException at exercise_18.ProducervoidTovoid(exercise_18.java:370) (details below)
JR runtime error in "Thread-3" edu.ucdavis.jr.jrRuntimeError: Unhandled exception: java.lang.NullPointerException at exercise_18.ConsumervoidTovoid(exercise_18.java:172) (details below)
Exception in thread "Thread-4" edu.ucdavis.jr.jrRuntimeError: Unhandled exception: java.lang.NullPointerException at exercise_18.ProducervoidTovoid(exercise_18.java:370)
	at exercise_18.ProducervoidTovoid(exercise_18.java:410)
	at exercise_18.access$100(exercise_18.java:13)
	at exercise_18$ProcOp_voidTovoid_implProducer$sendThread.run(exercise_18.java:266)
	at java.lang.Thread.run(Thread.java:748)
java.rmi.NoSuchObjectException: object not exported
	at sun.rmi.transport.ObjectTable.unexportObject(ObjectTable.java:153)
	at java.rmi.server.UnicastRemoteObject.unexportObject(UnicastRemoteObject.java:370)
	at edu.ucdavis.jr.jrx.jrvm.unregisterAllRemote(jrvm.java:511)
	at edu.ucdavis.jr.jrRuntimeError.<init>(jrRuntimeError.java:37)
	at exercise_18.ConsumervoidTovoid(exercise_18.java:212)
	at exercise_18.access$000(exercise_18.java:13)
	at exercise_18$ProcOp_voidTovoid_implConsumer$sendThread.run(exercise_18.java:68)
	at java.lang.Thread.run(Thread.java:748)
Exception in thread "Thread-3" edu.ucdavis.jr.jrRuntimeError: Unhandled exception: java.lang.NullPointerException at exercise_18.ConsumervoidTovoid(exercise_18.java:172)
	at exercise_18.ConsumervoidTovoid(exercise_18.java:212)
	at exercise_18.access$000(exercise_18.java:13)
	at exercise_18$ProcOp_voidTovoid_implConsumer$sendThread.run(exercise_18.java:68)
	at java.lang.Thread.run(Thread.java:748)
Contact with a VM on 0a37ad62b4be has been lost ... exiting

error 2.0
root@0a37ad62b4be:/jr_code/Example/exercise_18# jr exercise_18
exercise_18.jr:7: illegal start of type
    private static Queue<Integer> products_list = new LinkedList<>();
                                                                 ^
exercise_18.jr:7: > expected
    private static Queue<Integer> products_list = new LinkedList<>();
                                                                    ^
Not generating any jrGen files due to errors.
2 errors

--------------------------------------------------------------------------------
PERFECT PROGRAM

import edu.ucdavis.jr.JR;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class exercise_5c{
    private static Queue<Integer> products_list = new LinkedList<Integer>();
    //private static int index_list = 50;
    private static sem deposited = 0;
    private static sem recovered = 1;
    private static final int N = 10; // Numbers of Producers
    private static final int M = 10; // Numbers of Consumers

    private static op void pause(int time){
        
        try{
                Thread.sleep(time);
        }catch(java.lang.Exception e){}

    }

    private static process Producer( (int i = 0; i < N; i++) ){
        Random random = new Random();

        while(true) {
            int random_int = random.nextInt(100) + 1;

            // Wait - Wait for the product to be recovered
            P(recovered);

            products_list.add(random_int);
            System.out.println("Producer add in products list... Product [" + random_int + "]");
            call pause(800);

            // Signal - Notify that it has been deposited
            V(deposited);
        }
    }

    private static process Consumer( (int j = 0; j < M; j++) ){
        while(true) {
            // Wait - Wait for the product to be deposited
            P(deposited);

            int product = products_list.poll();
            System.out.println("Consumer remove in products list... Product [" + product +"]");

            call pause(800);

            // Signal - Notify that it has been recovered
            V(recovered);
        }
    }

    public static void main(String[] args) {
        try {
			JR.registerQuiescenceAction(end);
		} catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
			e.printStackTrace();
		}
    }

    private static op void end(){
        System.out.println("This is the end...");
    }
}

-------------------------------------------------------------------------------------------------
PROGRAM IN PROGRESS

import edu.ucdavis.jr.JR;
import java.util.LinkedList;


public class exercise_8b{
    private static Queue<Integer> products_list = new LinkedList<Integer>();
    private static final int N = 10;
    private static final int M = 10;
    private static sem writing = ;
    private static sem reading = ;

    private static op void pause(int time){
        
        try{
                Thread.sleep(time);
        }catch(java.lang.Exception e){}

    }

    private static process Writers( (int i = 0; i < N; i++) ){

    }

    private static process Readers( (int j = 0; i < M; j++) ){

    }
}

------------------------------------------------------------------------------------------------
BARBER SLEEPING PROBLEM PROGRAM

import edu.ucdavis.jr.JR;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;

public class SleepingBarber {
    // --- Constantes del Problema ---
    private static final int NUM_CHAIRS = 5; // Número de sillas de espera (N clientes además del sillón)
    private static final int NUM_CLIENTS_TO_SIMULATE = 20; // Total de clientes que llegarán para la simulación

    // --- Semáforos ---
    private static sem clients = 0;          // # de clientes que necesitan atención (en sillón o esperando)
    private static sem barber = 0;           // El barbero está despierto y listo para atender/cobrar
    private static sem customer_chair = 1;   // El sillón del barbero (1 = libre, 0 = ocupado)
    private static sem cashier = 0;          // El cliente está listo para pagar en la caja
    private static sem payment_completed = 0; // El barbero ha terminado de cobrar
    private static sem chairs_mutex = 1;     // Mutex para proteger la variable waiting_chairs_count

    // --- Variables de Conteo ---
    private static int waiting_chairs_count = 0; // # de clientes en las sillas de espera

    // --- Método de Pausa (para simulación visual) ---
    private static op void pause(int time) {
        try {
            Thread.sleep(time);
        } catch (java.lang.Exception e) {
            System.err.println("Error en pause: " + e.getMessage());
        }
    }

    // --- Proceso Barbero ---
    private static process Barber() {
        System.out.println("Barber: I'm ready for business.");
        while (true) {
            // 1. Esperar por clientes (dormirse si no hay)
            P(clients); // El barbero espera a que haya un cliente que necesite su atención

            // 2. Despertar / Mover al sillón (si aplica)
            P(barber);  // El barbero espera a ser despertado por un cliente en el sillón

            // 3. Cortar el pelo
            System.out.println("Barber: Cutting hair...");
            call pause(1500); // Simular tiempo de corte
            System.out.println("Barber: Haircut finished!");

            // 4. Liberar el sillón
            V(customer_chair); // El sillón está libre para el siguiente cliente

            // 5. Esperar al cliente en la caja para cobrar
            P(cashier); // Espera a que el cliente se posicione en la caja

            // 6. Cobrar
            System.out.println("Barber: Collecting payment...");
            call pause(700); // Simular tiempo de cobro
            System.out.println("Barber: Payment collected!");

            // 7. Señalar al cliente que puede irse
            V(payment_completed); // Señala que el pago ha sido procesado
        }
    }

    // --- Proceso Cliente ---
    // (int k = 0; k < NUM_CLIENTS_TO_SIMULATE; k++) para lanzar múltiples clientes
    private static process Client((int client_id)) {
        System.out.println("Client " + client_id + ": Arrived at barber shop.");

        // Intentar sentarse en una silla de espera
        P(chairs_mutex); // Proteger el acceso a waiting_chairs_count
        if (waiting_chairs_count < NUM_CHAIRS) {
            // Hay sillas disponibles
            waiting_chairs_count++;
            System.out.println("Client " + client_id + ": Took a waiting chair. Waiting chairs occupied: " + waiting_chairs_count);
            V(chairs_mutex); // Liberar mutex

            V(clients); // Notificar al barbero que hay un cliente (en espera)
            P(customer_chair); // Esperar a que el sillón esté libre y sentarse en él
                               // Una vez que se adquiere, significa que el barbero lo ha liberado y es mi turno.

            // En este punto, el cliente está en el sillón.
            System.out.println("Client " + client_id + ": Moved to barber chair.");
            V(barber); // Despertar al barbero (si estaba durmiendo) o señalar que estoy listo para corte

            // Simular corte (el cliente espera pasivamente)
            // Cuando el barbero termina, libera customer_chair.
            // Para el cliente, su P(customer_chair) ya se cumplió, no necesita más acciones aquí hasta el cobro.

            // Después del corte, el cliente se levanta del sillón y va a la caja
            System.out.println("Client " + client_id + ": Finished haircut, heading to cashier.");
            V(cashier); // Notificar al barbero que está listo para pagar

            P(payment_completed); // Esperar a que el barbero termine de cobrar
            System.out.println("Client " + client_id + ": Payment done, leaving barber shop.");

            // Decrementar la cuenta de sillas de espera (sólo si estuvo esperando)
            // Esto se hace después de que el cliente haya terminado y se vaya
            P(chairs_mutex); // Proteger el acceso
            waiting_chairs_count--; // Asume que un cliente que ocupó el sillón "libera" una silla de espera
                                    // Esta es una simplificación; en realidad, el cliente libera la silla de espera
                                    // cuando se mueve al sillón. Se corrige abajo en el comentario.
            V(chairs_mutex);
            
            // Lógica corregida para sillas de espera:
            // El cliente decrementa waiting_chairs_count cuando se levanta de la silla de espera PARA IR AL SILLON.
            // Si llega directamente al sillón, no incrementa waiting_chairs_count.
            // La complejidad de este patrón puede requerir un poco más de finura en el manejo de sillas.
            // Para esta versión, el `waiting_chairs_count` representa "clientes que aún esperan por el sillón".
            // Por lo tanto, el decremento debería ir ANTES de `P(customer_chair)`.
            // Ver una versión más robusta abajo en las notas.

        } else {
            // No hay sillas disponibles
            V(chairs_mutex); // Liberar mutex
            System.out.println("Client " + client_id + ": No waiting chairs available, leaving.");
        }

        call pause(new Random().nextInt(2000) + 500); // Tiempo que el cliente tarda en volver a llegar (o para el siguiente)
    }

    // --- Main Method ---
    public static void main(String[] args) {
        // Lanzar el Barbero
        new Barber();

        // Lanzar los Clientes
        for (int i = 0; i < NUM_CLIENTS_TO_SIMULATE; i++) {
            new Client(i + 1); // Id de cliente
            call pause(new Random().nextInt(1000) + 200); // Tiempo de llegada entre clientes
        }

        try {
            JR.registerQuiescenceAction(end);
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // --- Acción de Quiescencia ---
    private static op void end() {
        System.out.println("SleepingBarber simulation has ended.");
    }
}

---------------------------------------------------------------------------------------------------------------------------
PROGRAM FOR EXERCISE 11
import edu.ucdavis.jr.JR;
import java.util.Random;

public class PizzaShop {
    // --- Constantes ---
    private static final int PIZZAS_TO_MAKE = 20; // Número total de pizzas para la jornada
    private static final int PAUSE_TIME_MS = 100; // Tiempo de pausa para simulación

    // --- Semáforos ---
    private static sem chef_ready = 1;          // 1 si el chef puede empezar una nueva pizza, 0 si debe esperar
    private static sem ingredient_salsa = 0;    // 1 si la pizza necesita salsa, 0 si no
    private static sem ingredient_queso = 0;    // 1 si la pizza necesita queso, 0 si no
    private static sem ingredient_morrones = 0; // 1 si la pizza necesita morrones, 0 si no
    private static sem mutex_pizza_count = 1;   // Mutex para proteger el contador de pizzas

    // --- Variable de conteo ---
    private static int total_pizzas_made = 0;

    // --- Método de pausa ---
    private static op void pause(int time) {
        try {
            Thread.sleep(time);
        } catch (java.lang.Exception e) {
            // Ignorar interrupciones en la simulación
        }
    }

    // --- Proceso Chef ---
    private static process Chef() {
        Random random = new Random();
        System.out.println("Chef: Ready to make pizzas!");

        for (int i = 0; i < PIZZAS_TO_MAKE; i++) {
            P(chef_ready); // Espera a que la pizza anterior sea completada

            int ingredient1 = random.nextInt(3); // 0=salsa, 1=queso, 2=morrones
            int ingredient2;
            do {
                ingredient2 = random.nextInt(3);
            } while (ingredient2 == ingredient1); // Asegura dos ingredientes distintos

            String ingredientsOnPizza = "";
            String missingIngredient = "";

            // Determinar los ingredientes y el faltante
            if ((ingredient1 == 0 && ingredient2 == 1) || (ingredient1 == 1 && ingredient2 == 0)) { // Salsa y Queso
                missingIngredient = "Morrones";
                V(ingredient_morrones); // Señal al ayudante de morrones
            } else if ((ingredient1 == 0 && ingredient2 == 2) || (ingredient1 == 2 && ingredient1 == 0)) { // Salsa y Morrones
                missingIngredient = "Queso";
                V(ingredient_queso); // Señal al ayudante de queso
            } else { // Queso y Morrones
                missingIngredient = "Salsa";
                V(ingredient_salsa); // Señal al ayudante de salsa
            }

            System.out.println("Chef: Pizza with " + (ingredient1 == 0 ? "Salsa" : (ingredient1 == 1 ? "Queso" : "Morrones")) +
                                " and " + (ingredient2 == 0 ? "Salsa" : (ingredient2 == 1 ? "Queso" : "Morrones")) +
                                ". Missing: " + missingIngredient + ".");
            call pause(PAUSE_TIME_MS); // Simular tiempo de preparación inicial
        }
        System.out.println("Chef: All " + PIZZAS_TO_MAKE + " pizzas started. Now resting.");
    }

    // --- Proceso Ayudante Salsa ---
    private static process HelperSalsa() {
        System.out.println("Helper Salsa: Waiting for pizzas missing salsa.");
        while (true) {
            P(ingredient_salsa); // Espera por una pizza que necesite salsa
            System.out.println("Helper Salsa: Adding salsa to pizza.");
            call pause(PAUSE_TIME_MS); // Simular tiempo de completado

            // Incrementar contador de pizzas hechas
            P(mutex_pizza_count);
            total_pizzas_made++;
            System.out.println("Helper Salsa: Pizza completed! Total pizzas: " + total_pizzas_made);
            if (total_pizzas_made == PIZZAS_TO_MAKE) {
                V(chef_ready); // Asegura que el chef pueda terminar si es la última pizza
                V(ingredient_queso); // Desbloquea otros ayudantes para evitar interbloqueo al final
                V(ingredient_morrones);
                return; // Terminar el proceso
            }
            V(mutex_pizza_count);

            V(chef_ready); // Señala al Chef que la pizza ha sido completada, puede iniciar la siguiente
        }
    }

    // --- Proceso Ayudante Queso ---
    private static process HelperQueso() {
        System.out.println("Helper Queso: Waiting for pizzas missing queso.");
        while (true) {
            P(ingredient_queso); // Espera por una pizza que necesite queso
            System.out.println("Helper Queso: Adding queso to pizza.");
            call pause(PAUSE_TIME_MS); // Simular tiempo de completado

            P(mutex_pizza_count);
            total_pizzas_made++;
            System.out.println("Helper Queso: Pizza completed! Total pizzas: " + total_pizzas_made);
            if (total_pizzas_made == PIZZAS_TO_MAKE) {
                V(chef_ready);
                V(ingredient_salsa);
                V(ingredient_morrones);
                return;
            }
            V(mutex_pizza_count);

            V(chef_ready);
        }
    }

    // --- Proceso Ayudante Morrones ---
    private static process HelperMorrones() {
        System.out.println("Helper Morrones: Waiting for pizzas missing morrones.");
        while (true) {
            P(ingredient_morrones); // Espera por una pizza que necesite morrones
            System.out.println("Helper Morrones: Adding morrones to pizza.");
            call pause(PAUSE_TIME_MS); // Simular tiempo de completado

            P(mutex_pizza_count);
            total_pizzas_made++;
            System.out.println("Helper Morrones: Pizza completed! Total pizzas: " + total_pizzas_made);
            if (total_pizzas_made == PIZZAS_TO_MAKE) {
                V(chef_ready);
                V(ingredient_salsa);
                V(ingredient_queso);
                return;
            }
            V(mutex_pizza_count);

            V(chef_ready);
        }
    }

    // --- Main Method ---
    public static void main(String[] args) {
        new Chef();
        new HelperSalsa();
        new HelperQueso();
        new HelperMorrones();

        try {
            JR.registerQuiescenceAction(end);
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // --- Acción de Quiescencia ---
    private static op void end() {
        System.out.println("\n--- End of Shift ---");
        System.out.println("Total pizzas made: " + total_pizzas_made);
        System.out.println("Pizza Shop simulation has ended.");
    }
}

